# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git github git-auto-fetch vi-mode)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

#
# Set HOSTNAME (conststent with bash)
#
export HOSTNAME=$(hostname)

#
# Set path ....
#

if [ -e "/usr/sbin" ]; then
	export PATH="/usr/sbin:$PATH"
fi

if [ -e "/sbin" ]; then
	export PATH="/sbin:$PATH"
fi

if [ -e "/usr/local/bin" ]; then
	export PATH="/usr/local/bin:$PATH"
fi

if [ -e "/usr/local/opt/coreutils/libexec/gnubin" ]; then
	export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
fi

if [ -e "$HOME/.local/bin" ]; then
	export PATH="$HOME/.local/bin:$PATH"
fi

if [ -e "$HOME/.local/bin" ]; then
	export PATH="$HOME/.local/bin:$PATH"
fi

if [ -e "$HOME/bin" ]; then
	export PATH="$HOME/bin:$PATH"
fi

if [ -e "$HOME/share/man" ]; then
	export MANPATH="$HOME/share/man:$MANPATH"
fi

#
# Setup miniconda if here
#

if [ -d "$HOME/miniconda3" ]; then
	source "$HOME/miniconda3/etc/profile.d/conda.sh"
	conda activate
fi

#
# Some useful environmental variables
#
# Editors and pagers
#

if [ -e "$HOME/bin/vim" ]; then
	export EDITOR=$HOME/bin/vim
	export SVN_EDITOR=$HOME/bin/vim
else
	export EDITOR=/usr/bin/vim
	export SVN_EDITOR=/usr/bin/vim
fi

export PAGER=/usr/bin/less
export LESS='-r -m -i'

# Make use multiple cores with make
if [[ $OSTYPE == linux* ]]; then
	export MAKEFLAGS="--jobs `nproc`"
	export CMAKE_BUILD_PARALLEL_LEVEL=`nproc`
elif [[ $OSTYPE == darwin* ]]; then
	export MAKEFLAGS="--jobs `sysctl -n hw.ncpu`"
	export CMAKE_BUILD_PARALLEL_LEVEL=`sysctl -n hw.ncpu`
fi

#
# Setup Aliases
#

if [[ $OSTYPE == darwin* ]]; then
	alias ls="ls -h -G"
	alias ll="ls -h -G -l"
	alias la="ls -h -G -l -A"
	alias mvim="open -a MacVim "
elif [[ $OSTYPE == linux* ]]; then
	alias ls="ls --color=auto -h"
	alias ll="ls --color-auto -lh"
	alias la="ls --color-auto -lA"
fi

alias rm="rm -i"
alias cp="cp -v"
alias mv="mv -v"
alias grep="grep --color=auto --line-number"
alias caget="caget -a"
alias sudo="sudo -E"
alias tmux="tmux -2"
alias vi="vim -p"
alias rmswp="find . -name \.*\.swp -exec rm {} \;"
alias rmswo="find . -name \.*\.swo -exec rm {} \;"
alias sshpw="ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no "

#
# One Password stuff
#
if which op > /dev/null 2>&1; then
	alias op-login='export OP_SESSION_my=`op signin --output=raw`'
fi

#
# Deal with SSH Agent
#

SSH_ENV="$HOME/.ssh/environment.$HOSTNAME"

#
# Add ruby gem info
#
if which ruby > /dev/null 2>&1 && [ which gem > /dev/null 2>&1; then
    export PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

#
# Version Detection
#
get_os_version () {
	if [ -f /etc/os-release ]; then
		# freedesktop.org and systemd
		. /etc/os-release
		OS=$NAME
		VER=$VERSION_ID
	elif type lsb_release >/dev/null 2>&1; then
		# linuxbase.org
		OS=$(lsb_release -si)
		VER=$(lsb_release -sr)
	elif [ -f /etc/lsb-release ]; then
		# For some versions of Debian/Ubuntu without lsb_release command
		. /etc/lsb-release
		OS=$DISTRIB_ID
		VER=$DISTRIB_RELEASE
	elif [ -f /etc/debian_version ]; then
		# Older Debian/Ubuntu/etc.
		OS=Debian
		VER=$(cat /etc/debian_version)
	elif [ -f /etc/SuSe-release ]; then
		# Older SuSE/etc.
		...
	elif [ -f /etc/redhat-release ]; then
		# Older Red Hat, CentOS, etc.
		...
	else
		# Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
		OS=$(uname -s)
		VER=$(uname -r)
	fi
}

get_os_version


#
# Do Nice Prompts
#

setTerminalText () {
    # echo works in bash & zsh
    local mode=$1 ; shift
    echo -ne "\033]$mode;$@\007"
} 

stt_both  () { setTerminalText 0 $@; }
stt_tab   () { setTerminalText 1 $@; }
stt_title () { setTerminalText 2 $@; }

set-window-title() {
	_HOSTNAME=`hostname -f`
	stt_tab ${_HOSTNAME}
	stt_title "${OS} ${USER}@`hostname -f`: ${PWD/#$HOME/~}"
}

add-zsh-hook precmd set-window-title


#
# Run other zshrc files if present
#

if [ -e "$HOME/.zshrc-local" ]; then
	source "$HOME/.zshrc-local"
fi

if [ -e "$HOME/.zshrc-nsls2" ]; then
	source "$HOME/.zshrc-nsls2"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh" || true

